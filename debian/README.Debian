xen-api for Debian author's notes
---------------------------------

This is the XCP toolstack ported to Debian. Installing these packages will turn
a Debian system into an XCP virtualization host. While we aim to be
functionally equivalent to a standard XCP system, not all features are
currently ported to Debian. Noteably, block-based storage repositories have
been disabled.

 -- Jon Ludlam <jonathan.ludlam@eu.citrix.com>  Thu, 07 Jul 2011 21:50:18 +0100

Quick setup and howto
---------------------
1/ Install Debian squeeze
Make sure you use LVM, and leave enough free space on the VG to be able to host
VMs. What I use is a 2GB RAID1 rootfs on 2 disks, then a 990 GB RAID10 array on
which I have LVM as a host for swap (1GB), usr (8 to 16 GB), var (the amount of
RAM + 4GB), tmp (1GB).

Important note: For performance reasons, it is recommended to use a 32 bits
dom0 kernel (with of course a 32 bits userland OS), and a 64 bits hypervisor
(yes, the amd64 version of the hypervisor is also installable if you install a
32 bits Debian).

2/ Upgrade to SID or testing
XCP is currently only in SID (not even in Wheezy yet as of writing, but it
should soon migrate).

3/ Install Xen and XCP
You can just do:

apt-get install xcp-xapi

If you have installation of Recommended packages activated, then it will pull
all the necessary. Otherwise, you might want to do:

apt-get install xcp-xapi xcp-vncterm xcp-guest-templates \
    linux-headers-686-pae bridge-utils qemu-keymaps qemu-utils libc6-xen

Since you'll be using xe, I would highly recommend that you install
bash-completion as well. The xcp-xe package contains a
/etc/bash_completion.d/xe file with all the commands. So do:

apt-get install bash-completion

and uncomment the use of it in /etc/bash.bashrc so that everyone in the
system may use completion.

4/ Configuring Xen and XCP
4.1/ Switch using xl instead of xm to control Xen

sed -i "s/TOOLSTACK=/TOOLSTACK=xl/" /etc/default/xen

4.2/ Configure network to use a bridge xenbr0
sed -i "s/allow-hotplug eth0/auto xenbr0/" /etc/network/interfaces
sed -i "s/iface eth0/iface xenbr0/"/etc/network/interfaces
echo "  bridge_ports eth0" >>/etc/network/interfaces

4.3/ Set Xen as default in GRUB
cd /etc/grub.d
mv 10_linux 25_linux

echo "
# Start dom0 with less RAM
GRUB_CMDLINE_XEN_DEFAULT=\"dom0_mem=1024M\"

# Disable OS prober to prevent virtual machines on logical volumes from
# appearing in the boot menu.
GRUB_DISABLE_OS_PROBER=true
" >>/etc/default/grub

update-grub2 or dpkg-reconfigure grub-pc (the later is needed to check that
you've installed Grub on both MBR of your freshly installed Debian anyway).

4.4/ Reboot (under Xen)

5/ Setting-up storage repositories (SRs)
5.1/ VM SR
For your virtual machines, XCP uses storage repositories. To create a new
one, you need a big block device on your server. For example, if you use
LVM, you could do something like that to create it:
lvcreate -L500G -nnode4407xensr0 node4407vg0

to create a 500 GB LVM, then tell XCP to use it:
xe sr-create type=ext name-label=node4407sr0 \
   device-config:device=/dev/mapper/node4407vg0-node4407sr0

By default, this will print the new UUID of the SR, but you can also get it
with:
SR=`xe sr-list type=ext --minimal`

You should then attach it as the default for the pool of storage for XCP:
pool=`xe pool-list --minimal`
xe pool-param-set uuid=$pool default-SR=$SR

this will, by default, use mkfs.ext3, so expect it to take some time
if you gave xe sr-create a big partition.

5.2/ ISO SR using samba
... please contribute ...

6/ Using XCP
Now that you got XCP up and running on your server, let's play and setup some
virtual machines.

You can list available VM templates with "xe template-list", once you've done
your choice, you will need to do something like this:
template=$(xe template-list name-label="Debian Squeeze 6.0 (32-bit)" --minimal)

to get its UUID, then create the VM instance with:
vm=$(xe vm-install template=$template new-name-label=debian)

Get the UID of your xenbr0 network:
network=$(xe network-list bridge=xenbr0 --minimal)

And use it to attach a virtual interface to your VM:
vif=$(xe vif-create vm-uuid=$vm network-uuid=$network device=0)

Tell the VM that we want to boot using a debian repo:
xe vm-param-set uuid=$vm \
   other-config:install-repository=http://ftp.uk.debian.org/debian

Before you start it, you can set it's memory to 1GB:
xe vm-memory-limits-set static-min=1024MiB static-max=1024MiB \
   dynamic-min=1024MiB dynamic-max=1024MiB \
   vm=5aa8a7bc-700c-ba5c-3bcb-36090cc28b8f

Finally start the VM:
xe vm-start uuid=$vm

And access it's console:
xe console vm=$vm

When you're done with the VM, you can do:
xe vm-shutdown uuid=$vm

And if you want to completely get rid of it:
xe vm-destroy uuid=$vm
